name: Build image

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

env:
  ORGANIZATION: proyectos-enee
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: 'proyectos-enee/evaluacionUtcd/backend'
  IMAGE_NAME_FRONTEND: 'proyectos-enee/evaluacionUtcd/frontend'
  DB__CONEXION: 'Server=localhost;Database=evaluacionUtcd;User Id=postgres; Password=evaluacionUtcd;Enlist=true;'

jobs:
  backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Pulling repo
        uses: actions/checkout@v3

      - name: Update Dockerfile version
        run: |
          sed -i 's/<DOCKER_BACKEND_IMAGE_VERSION>/'${{ vars.DOCKER_BACKEND_IMAGE_VERSION }}'/g' ./backend/Dockerfile
          cat ./backend/Dockerfile

      - name: Log in to the container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ vars.ACCESS_TOKEN }}

      - name: Extracting metada (tags, labels) for docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=sha
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/') }}
            type=ref,event=tag,enable=${{ startsWith(github.ref, 'refs/tags/') }}

      - name: Build and push image
        uses: docker/build-push-action@v3
        with:
          context: ./backend
          file: ./backend/Dockerfile
          build-args: |
            NUGET_USERNAME=${{ github.actor }}
            NUGET_PASSWORD=${{ vars.ACCESS_TOKEN }}
            GIT_ORGANIZATION=${{ env.ORGANIZATION }}
            DB__CONEXION=${{ env.DB__CONEXION }}
            DB__SCHEMA_EVENTS=evaluacionUtcd_events
            DB__SCHEMA_DOCS=evaluacionUtcd_docs
            DB__SCHEMA_TABLES=evaluacionUtcd
            AUTH__SERVER=http://localhost:8080
            AUTH__CORS_ORIGINS=http://localhost:5173
            AUTH__CLIENT_ID=api
            AUTH__CLIENT_SECRET=api
            AUTH__AUDIENCE=api
            QUEUE__DISABLED=true
            QUEUE__SERVER=amqp://localhost:5672
            QUEUE__USER=rabbitmq
            QUEUE__PASSWORD=Cambiar*001
            SERVER__PARAMETROS=http://api-parametros.proyectos-enee.xyz
            SERVER__PARAMETROS_APIKEY=608021be-5e16-47ed-acdd-2aa34c84ed15
            MONITORING__OTL_METRICS_ENDPOINT=http://localhost:4317
            MONITORING__OTL_TRACES_ENDPOINT=http://localhost:4318
            SMTP__HOST=smtp.resend.com
            SMTP__PORT=587
            SMTP__ENABLE_SSL=true
            SMTP__FROM=onboarding@resend.dev
            SMTP__USER=resend
            SMTP__PASSWORD=re_8D4V4Fpr_LLcQggkH1QSosGP7T34YxeL7
            SMTP__AUTHENTICATION=true
          no-cache: true
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  frontend:
    runs-on: ubuntu-latest
    needs: backend
    permissions:
      contents: read
      packages: write
    steps:
      - name: Pulling repo
        uses: actions/checkout@v3

      - name: Update Dockerfile version
        run: |
          sed -i 's/<DOCKER_FRONTEND_IMAGE_VERSION>/'${{ vars.DOCKER_FRONTEND_IMAGE_VERSION }}'/g' ./frontend/Dockerfile
          cat ./frontend/Dockerfile

      - name: Log in to the container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ vars.ACCESS_TOKEN }}

      - name: Extracting metada (tags, labels) for docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=sha
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/') }}
            type=ref,event=tag,enable=${{ startsWith(github.ref, 'refs/tags/') }}

      - name: Build and push image
        uses: docker/build-push-action@v3
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          no-cache: true
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}